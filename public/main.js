'use strict';

var app = angular.module('main', ['ui.router']);

app.config(function ($urlRouterProvider) {
  $urlRouterProvider.otherwise('/');
});

app.controller('DashboardCtrl', function ($scope) {
  //code
  console.log('inside DashboardCtrl');
});

app.config(function ($stateProvider) {
  $stateProvider.state('dashboardState', {
    url: '/test',
    templateUrl: './app/dashboard/dashboard.html'
  });
});

app.controller('ExplorerCtrl', function ($scope, $element, vidConstants) {
  // Code to make the 'file holder div' take in
  // file path names
  var homedir = process.platform === 'win32' ? process.env.HOMEPATH : process.env.HOME;
  var shell = require('electron').shell;
  // var finder = require('./server/algorithms/search.js')
  var fs = require('fs');
  var path = require('path');
  var find = require('findit');
  var parseVideo = require('video-name-parser');

  //Button called "browse", opens homedirectory of user
  $scope.openHome = function () {
    return shell.showItemInFolder(homedir);
  };

  // --------------------------
  // Code that allows you to recurse through the directories
  //provided and return file names that end with certain exts

  var holder = document.getElementById('fileholder');
  holder.ondragover = function () {
    this.className = 'hover';
    return false;
  };
  holder.ondragleave = function () {
    this.className = '';
    return false;
  };
  holder.ondrop = function (e) {
    var dataPathArray = [];
    var soln = [];
    e.preventDefault();
    for (var i = 0; i < e.dataTransfer.files.length; ++i) {
      dataPathArray.push(e.dataTransfer.files[i].path);
    }
    dataPathArray.forEach(function (data) {
      var finder = find(data);
      finder.on('file', function (file, stat) {
        if (vidConstants.vidExtensions.indexOf(path.extname(file)) !== -1) {
          var parsed = parseVideo(file);
          soln.push(parsed);
        }
        console.log("Thank you for your patience!");
      });
      finder.on('end', function (file, stat) {
        // soln.forEach()
        console.log('soln', soln);
      });
    });
    return false;
  };
});

app.factory('vidConstants', function () {
  return {
    vidExtensions: ['.mkv', '.avi', '.mov', '.gifv', '.flv']
  };
});

app.config(function ($stateProvider) {
  $stateProvider.state('explorerState', {
    url: '/',
    templateUrl: './app/explorer/explorer.html',
    controller: 'ExplorerCtrl'
  });
});

app.directive('sidebar', function () {
  return {
    restrict: 'E',
    templateUrl: './app/directives/sidebar/index.html'
  };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImRhc2hib2FyZC9kYXNoYm9hcmQuY29udHJvbGxlci5qcyIsImRhc2hib2FyZC9kYXNoYm9hcmQuc3RhdGUuanMiLCJleHBsb3Jlci9leHBsb3Jlci5jb250cm9sbGVyLmpzIiwiZXhwbG9yZXIvZXhwbG9yZXIuc3RhdGUuanMiLCJkaXJlY3RpdmVzL3NpZGViYXIvc2lkZWJhci5kaXJlY3RpdmUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFBLEdBQUEsR0FBQSxPQUFBLENBQUEsTUFBQSxDQUFBLE1BQUEsRUFBQSxDQUFBLFdBQUEsQ0FBQSxDQUFBLENBQUE7O0FBRUEsR0FBQSxDQUFBLE1BQUEsQ0FBQSxVQUFBLGtCQUFBLEVBQUE7QUFDQSxvQkFBQSxDQUFBLFNBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQTtDQUNBLENBQUEsQ0FBQTs7QUNKQSxHQUFBLENBQUEsVUFBQSxDQUFBLGVBQUEsRUFBQSxVQUFBLE1BQUEsRUFBQTs7QUFFQSxTQUFBLENBQUEsR0FBQSxDQUFBLHNCQUFBLENBQUEsQ0FBQTtDQUNBLENBQUEsQ0FBQTs7QUNIQSxHQUFBLENBQUEsTUFBQSxDQUFBLFVBQUEsY0FBQSxFQUFBO0FBQ0EsZ0JBQUEsQ0FBQSxLQUFBLENBQUEsZ0JBQUEsRUFBQTtBQUNBLE9BQUEsRUFBQSxPQUFBO0FBQ0EsZUFBQSxFQUFBLGdDQUFBO0dBQ0EsQ0FBQSxDQUFBO0NBQ0EsQ0FBQSxDQUFBOztBQ0xBLEdBQUEsQ0FBQSxVQUFBLENBQUEsY0FBQSxFQUFBLFVBQUEsTUFBQSxFQUFBLFFBQUEsRUFBQSxZQUFBLEVBQUE7OztBQUdBLE1BQUEsT0FBQSxHQUFBLE9BQUEsQ0FBQSxRQUFBLEtBQUEsT0FBQSxHQUFBLE9BQUEsQ0FBQSxHQUFBLENBQUEsUUFBQSxHQUNBLE9BQUEsQ0FBQSxHQUFBLENBQUEsSUFBQSxDQUFBO0FBQ0EsTUFBQSxLQUFBLEdBQUEsT0FBQSxDQUFBLFVBQUEsQ0FBQSxDQUFBLEtBQUEsQ0FBQTs7QUFFQSxNQUFBLEVBQUEsR0FBQSxPQUFBLENBQUEsSUFBQSxDQUFBLENBQUE7QUFDQSxNQUFBLElBQUEsR0FBQSxPQUFBLENBQUEsTUFBQSxDQUFBLENBQUE7QUFDQSxNQUFBLElBQUEsR0FBQSxPQUFBLENBQUEsUUFBQSxDQUFBLENBQUE7QUFDQSxNQUFBLFVBQUEsR0FBQSxPQUFBLENBQUEsbUJBQUEsQ0FBQSxDQUFBOzs7QUFHQSxRQUFBLENBQUEsUUFBQSxHQUFBLFlBQUE7QUFDQSxXQUFBLEtBQUEsQ0FBQSxnQkFBQSxDQUFBLE9BQUEsQ0FBQSxDQUFBO0dBQ0EsQ0FBQTs7Ozs7O0FBTUEsTUFBQSxNQUFBLEdBQUEsUUFBQSxDQUFBLGNBQUEsQ0FBQSxZQUFBLENBQUEsQ0FBQTtBQUNBLFFBQUEsQ0FBQSxVQUFBLEdBQUEsWUFBQTtBQUNBLFFBQUEsQ0FBQSxTQUFBLEdBQUEsT0FBQSxDQUFBO0FBQ0EsV0FBQSxLQUFBLENBQUE7R0FDQSxDQUFBO0FBQ0EsUUFBQSxDQUFBLFdBQUEsR0FBQSxZQUFBO0FBQ0EsUUFBQSxDQUFBLFNBQUEsR0FBQSxFQUFBLENBQUE7QUFDQSxXQUFBLEtBQUEsQ0FBQTtHQUNBLENBQUE7QUFDQSxRQUFBLENBQUEsTUFBQSxHQUFBLFVBQUEsQ0FBQSxFQUFBO0FBQ0EsUUFBQSxhQUFBLEdBQUEsRUFBQSxDQUFBO0FBQ0EsUUFBQSxJQUFBLEdBQUEsRUFBQSxDQUFBO0FBQ0EsS0FBQSxDQUFBLGNBQUEsRUFBQSxDQUFBO0FBQ0EsU0FBQSxJQUFBLENBQUEsR0FBQSxDQUFBLEVBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxZQUFBLENBQUEsS0FBQSxDQUFBLE1BQUEsRUFBQSxFQUFBLENBQUEsRUFBQTtBQUNBLG1CQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsQ0FBQSxZQUFBLENBQUEsS0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBO0tBQ0E7QUFDQSxpQkFBQSxDQUFBLE9BQUEsQ0FBQSxVQUFBLElBQUEsRUFBQTtBQUNBLFVBQUEsTUFBQSxHQUFBLElBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQTtBQUNBLFlBQUEsQ0FBQSxFQUFBLENBQUEsTUFBQSxFQUFBLFVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQTtBQUNBLFlBQUEsWUFBQSxDQUFBLGFBQUEsQ0FBQSxPQUFBLENBQUEsSUFBQSxDQUFBLE9BQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxLQUNBLENBQUEsQ0FBQSxFQUFBO0FBQ0EsY0FBQSxNQUFBLEdBQUEsVUFBQSxDQUFBLElBQUEsQ0FBQSxDQUFBO0FBQ0EsY0FBQSxDQUFBLElBQUEsQ0FBQSxNQUFBLENBQUEsQ0FBQTtTQUNBO0FBQ0EsZUFBQSxDQUFBLEdBQUEsQ0FBQSw4QkFBQSxDQUFBLENBQUE7T0FDQSxDQUFBLENBQUE7QUFDQSxZQUFBLENBQUEsRUFBQSxDQUFBLEtBQUEsRUFBQSxVQUFBLElBQUEsRUFBQSxJQUFBLEVBQUE7O0FBRUEsZUFBQSxDQUFBLEdBQUEsQ0FBQSxNQUFBLEVBQUEsSUFBQSxDQUFBLENBQUE7T0FDQSxDQUFBLENBQUE7S0FDQSxDQUFBLENBQUE7QUFDQSxXQUFBLEtBQUEsQ0FBQTtHQUNBLENBQUE7Q0FDQSxDQUFBLENBQUE7O0FBR0EsR0FBQSxDQUFBLE9BQUEsQ0FBQSxjQUFBLEVBQUEsWUFBQTtBQUNBLFNBQUE7QUFDQSxpQkFBQSxFQUFBLENBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsT0FBQSxFQUFBLE1BQUEsQ0FBQTtHQUNBLENBQUE7Q0FDQSxDQUFBLENBQUE7O0FDN0RBLEdBQUEsQ0FBQSxNQUFBLENBQUEsVUFBQSxjQUFBLEVBQUE7QUFDQSxnQkFBQSxDQUFBLEtBQUEsQ0FBQSxlQUFBLEVBQUE7QUFDQSxPQUFBLEVBQUEsR0FBQTtBQUNBLGVBQUEsRUFBQSw4QkFBQTtBQUNBLGNBQUEsRUFBQSxjQUFBO0dBQ0EsQ0FBQSxDQUFBO0NBQ0EsQ0FBQSxDQUFBOztBQ05BLEdBQUEsQ0FBQSxTQUFBLENBQUEsU0FBQSxFQUFBLFlBQUE7QUFDQSxTQUFBO0FBQ0EsWUFBQSxFQUFBLEdBQUE7QUFDQSxlQUFBLEVBQUEscUNBQUE7R0FDQSxDQUFBO0NBQ0EsQ0FBQSxDQUFBIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ21haW4nLCBbJ3VpLnJvdXRlciddKTtcblxuYXBwLmNvbmZpZyhmdW5jdGlvbigkdXJsUm91dGVyUHJvdmlkZXIpe1xuXHQkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKCcvJyk7XG59KVxuIiwiYXBwLmNvbnRyb2xsZXIoJ0Rhc2hib2FyZEN0cmwnLCBmdW5jdGlvbigkc2NvcGUpe1xuICAvL2NvZGVcbiAgY29uc29sZS5sb2coJ2luc2lkZSBEYXNoYm9hcmRDdHJsJylcbn0pXG4iLCJhcHAuY29uZmlnKGZ1bmN0aW9uKCRzdGF0ZVByb3ZpZGVyKXtcbiAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoJ2Rhc2hib2FyZFN0YXRlJywge1xuICAgIHVybDogJy90ZXN0JyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vYXBwL2Rhc2hib2FyZC9kYXNoYm9hcmQuaHRtbCdcbiAgfSlcbn0pXG4iLCJhcHAuY29udHJvbGxlcignRXhwbG9yZXJDdHJsJywgZnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCwgdmlkQ29uc3RhbnRzKSB7XG4gIC8vIENvZGUgdG8gbWFrZSB0aGUgJ2ZpbGUgaG9sZGVyIGRpdicgdGFrZSBpblxuICAvLyBmaWxlIHBhdGggbmFtZXNcbiAgdmFyIGhvbWVkaXIgPSAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJykgPyBwcm9jZXNzLmVudi5IT01FUEFUSCA6XG4gICAgcHJvY2Vzcy5lbnYuSE9NRTtcbiAgY29uc3Qgc2hlbGwgPSByZXF1aXJlKCdlbGVjdHJvbicpLnNoZWxsO1xuICAvLyB2YXIgZmluZGVyID0gcmVxdWlyZSgnLi9zZXJ2ZXIvYWxnb3JpdGhtcy9zZWFyY2guanMnKVxuICB2YXIgZnMgPSByZXF1aXJlKCdmcycpO1xuICB2YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbiAgdmFyIGZpbmQgPSByZXF1aXJlKCdmaW5kaXQnKTtcbiAgdmFyIHBhcnNlVmlkZW8gPSByZXF1aXJlKCd2aWRlby1uYW1lLXBhcnNlcicpO1xuXG4gIC8vQnV0dG9uIGNhbGxlZCBcImJyb3dzZVwiLCBvcGVucyBob21lZGlyZWN0b3J5IG9mIHVzZXJcbiAgJHNjb3BlLm9wZW5Ib21lID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHNoZWxsLnNob3dJdGVtSW5Gb2xkZXIoaG9tZWRpcik7XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBDb2RlIHRoYXQgYWxsb3dzIHlvdSB0byByZWN1cnNlIHRocm91Z2ggdGhlIGRpcmVjdG9yaWVzXG4gIC8vcHJvdmlkZWQgYW5kIHJldHVybiBmaWxlIG5hbWVzIHRoYXQgZW5kIHdpdGggY2VydGFpbiBleHRzXG5cbiAgdmFyIGhvbGRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmaWxlaG9sZGVyJyk7XG4gIGhvbGRlci5vbmRyYWdvdmVyID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5jbGFzc05hbWUgPSAnaG92ZXInO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcbiAgaG9sZGVyLm9uZHJhZ2xlYXZlID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5jbGFzc05hbWUgPSAnJztcbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG4gIGhvbGRlci5vbmRyb3AgPSBmdW5jdGlvbihlKSB7XG4gICAgdmFyIGRhdGFQYXRoQXJyYXkgPSBbXTtcbiAgICB2YXIgc29sbiA9IFtdO1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGUuZGF0YVRyYW5zZmVyLmZpbGVzLmxlbmd0aDsgKytpKSB7XG4gICAgICBkYXRhUGF0aEFycmF5LnB1c2goZS5kYXRhVHJhbnNmZXIuZmlsZXNbaV0ucGF0aCk7XG4gICAgfVxuICAgIGRhdGFQYXRoQXJyYXkuZm9yRWFjaChmdW5jdGlvbihkYXRhKSB7XG4gICAgICB2YXIgZmluZGVyID0gZmluZChkYXRhKTtcbiAgICAgIGZpbmRlci5vbignZmlsZScsIGZ1bmN0aW9uKGZpbGUsIHN0YXQpIHtcbiAgICAgICAgaWYgKHZpZENvbnN0YW50cy52aWRFeHRlbnNpb25zLmluZGV4T2YocGF0aC5leHRuYW1lKGZpbGUpKSAhPT1cbiAgICAgICAgICAtMSkge1xuICAgICAgICAgIHZhciBwYXJzZWQgPSBwYXJzZVZpZGVvKGZpbGUpO1xuICAgICAgICAgIHNvbG4ucHVzaChwYXJzZWQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUubG9nKFwiVGhhbmsgeW91IGZvciB5b3VyIHBhdGllbmNlIVwiKTtcbiAgICAgIH0pXG4gICAgICBmaW5kZXIub24oJ2VuZCcsIGZ1bmN0aW9uKGZpbGUsIHN0YXQpIHtcbiAgICAgICAgLy8gc29sbi5mb3JFYWNoKClcbiAgICAgICAgY29uc29sZS5sb2coJ3NvbG4nLCBzb2xuKVxuICAgICAgfSlcbiAgICB9KVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcbn0pO1xuXG5cbmFwcC5mYWN0b3J5KCd2aWRDb25zdGFudHMnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICB2aWRFeHRlbnNpb25zOiBbJy5ta3YnLCAnLmF2aScsICcubW92JywgJy5naWZ2JywgJy5mbHYnXVxuICB9XG59KVxuIiwiYXBwLmNvbmZpZyhmdW5jdGlvbigkc3RhdGVQcm92aWRlcil7XG4gICRzdGF0ZVByb3ZpZGVyLnN0YXRlKCdleHBsb3JlclN0YXRlJywge1xuICAgIHVybDogJy8nLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9hcHAvZXhwbG9yZXIvZXhwbG9yZXIuaHRtbCcsXG4gICAgY29udHJvbGxlcjogJ0V4cGxvcmVyQ3RybCdcbiAgfSlcbn0pXG4iLCJhcHAuZGlyZWN0aXZlKCdzaWRlYmFyJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vYXBwL2RpcmVjdGl2ZXMvc2lkZWJhci9pbmRleC5odG1sJ1xuICB9O1xufSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
