'use strict';

var angApp = angular.module('main', ['ui.router']);

angApp.config(function ($urlRouterProvider) {
		$urlRouterProvider.otherwise('/');
});

angApp.controller('DashboardCtrl', function ($rootScope, $scope, Storage, initialize) {});

angApp.config(function ($stateProvider) {
		$stateProvider.state('dashboardState', {
				url: '/dashboard',
				templateUrl: './app/js/common/dashboard/dashboard.html',
				controller: 'DashboardCtrl'
		});
});

angApp.controller('ExplorerCtrl', function ($scope, $element, vidConstants, Storage, initialize, $rootScope) {
		// Code to make the 'file holder div' take in
		// file path names

		// $rootScope.$on('dbLoaded', function() {
		//   console.log('initialized', Storage.findOrCreate(soln.name).then(result=> console.log(result)));
		//   // .then(function(result) {console.log(result)});
		// })

		var homedir = process.platform === 'win32' ? process.env.HOMEPATH : process.env.HOME;
		var shell = require('electron').shell;
		// var finder = require('./server/algorithms/search.js')
		var fs = require('fs');
		var path = require('path');
		var find = require('findit');
		var parseVideo = require('video-name-parser');

		//Button called "browse", opens homedirectory of user
		$scope.openHome = function () {
				return shell.showItemInFolder(homedir);
		};

		// --------------------------
		// Code that allows you to recurse through the directories
		//provided and return file names that end with certain exts

		var holder = document.getElementById('fileholder');
		holder.ondragover = function () {
				this.className = 'hover';
				return false;
		};
		holder.ondragleave = function () {
				this.className = '';
				return false;
		};
		holder.ondrop = function (e) {
				var dataPathArray = [];
				var soln = [];
				e.preventDefault();
				for (var i = 0; i < e.dataTransfer.files.length; ++i) {
						dataPathArray.push(e.dataTransfer.files[i].path);
				}
				dataPathArray.forEach(function (data) {
						var finder = find(data);
						finder.on('file', function (file, stat) {
								var mediaName = file.split("/").pop();
								console.log(mediaName);
								if (vidConstants.vidExtensions.indexOf(path.extname(file)) !== -1) {
										var parsed = parseVideo(mediaName);
										parsed.filePath = file;
										soln.push(parsed);
								}
								console.log("Thank you for your patience!");
						});
						finder.on('end', function (file, stat) {

								soln.forEach(function (eachFile) {
										var mediaObj = { title: eachFile.name, year: eachFile.year, season: eachFile.season, episode: eachFile.episode };
										Storage.findOrCreate(mediaObj).then(function (result) {
												return console.log(result);
										});
								});
								console.log('soln', soln);
						});
				});
				return false;
		};
});

angApp.factory('vidConstants', function () {
		return {
				vidExtensions: ['.mkv', '.avi', '.mov', '.gifv', '.flv']
		};
});

angApp.config(function ($stateProvider) {
		$stateProvider.state('explorerState', {
				url: '/',
				templateUrl: './app/js/common/explorer/explorer.html',
				controller: 'ExplorerCtrl',
				resolve: {
						initialize: function initialize(Storage) {
								return Storage.init();
						}
				}
		});
});

'use strict';
var loki = require('lokijs'),
    path = require('path'),
    Promise = require('bluebird'),
    omdb = Promise.promisifyAll(require('omdb'));

angApp.factory('Storage', function ($rootScope) {
		function findOmdb(name) {
				console.log('in omdb function', name);
				return omdb.searchAsync(name).then(function (results) {
						if (results.length < 1) return;
						if (results.length >= 1) {
								return omdb.getAsync(results[0].imdb);
						}
				});
		};
		//Not being used anymore
		function addMedia(mediaTitle) {
				var self = this;
				console.log(self);
				return new Promise(function (resolve, reject) {
						console.log(self);
						findOmdb(mediaTitle).then(function (metadata) {
								var media = {};
								media = metadata;
								media._id = metadata.imdb.id;
								self.collection.insert(media);
								console.log(media);
								self.db.saveDatabase();
						}).then(function () {
								resolve(self);
						}, function (err) {
								reject(err);
						});
				});
		};

		return {
				db: new loki(path.resolve(__dirname, 'app.db')),
				collection: null,
				loaded: false,
				init: function init() {
						var self = this;
						self.db.loadDatabase({}, function () {
								return new Promise(function (resolve, reject) {
										if (self.db.collections.length) {
												self.collection = self.db.getCollection('media');
												self.loaded = true;
												return resolve(self);
										} else {
												self.db.addCollection('media');
												self.db.saveDatabase();
												self.collection = self.db.getCollection('media');
												self.loaded = true;
												return resolve(self);
										}
								}).then(function () {
										console.log('in the factory', self);
										$rootScope.$emit('dbLoaded');
								}).then(null, function (err) {
										console.log(err);
								});
								// .catch(function(err) {
								// 	console.log(err);
								// })
						});
				},
				findMedia: function findMedia(mediaId) {
						var self = this;
						return new Promise(function (resolve, reject) {
								if (self.loaded && self.db.getCollection('media')) {
										return resolve(self.collection.find({
												"_id": mediaId
										}));
								} else {
										reject(new Error('db is not ready'));
								}
						});
				},
				//not being used either
				addMedia: addMedia,
				findOrCreate: function findOrCreate(mediaTitle) {
						var self = this;
						console.log('in the findOrCreate');
						return new Promise(function (resolve, reject) {
								if (self.loaded && self.db.getCollection('media')) {
										findOmdb(mediaTitle).then(function (metadata) {
												if (self.collection.find({
														'_id': metadata.imdb.id
												}).length > 0) {
														console.log(self.collection.find({
																'title': mediaTitle
														}).length);
														//Still need to return actual file
														return resolve(null);
												} else {
														console.log('creating');
														var media = {};
														media = metadata;
														media._id = metadata.imdb.id;
														self.collection.insert(media);
														console.log(media);
														self.db.saveDatabase();
														resolve(self);
												}
										});
								} else {
										reject(new Error('db is not ready'));
								}
						});
				}
		};
});

angApp.controller('PlayerCtrl', function ($rootScope, $scope) {
		console.log('hitting the player controller');
});

angApp.config(function ($stateProvider) {
		$stateProvider.state('playerState', {
				url: '/player',
				templateUrl: './app/js/common/player/player.html',
				controller: 'PlayerCtrl'
		});
});

angApp.controller('SingleItemCtrl', function ($rootScope, $scope) {
		console.log('hitting the single item controller');
});

angApp.config(function ($stateProvider) {
		$stateProvider.state('singleItemState', {
				url: '/singleItem',
				templateUrl: './app/js/common/singleItem/singleItem.html',
				controller: 'singleItemCtrl'
		});
});

angApp.controller('SidebarCtrl', function ($scope) {

		//Leftover attempts to make sidebar toggleable
		// $scope.menuActive = false;
		// var wrapper = document.getElementById('sidebar-wrapper')
		// $scope.toggleMenu = function(e) {
		//   // wrapper.toggleClass("toggled");
		//   $scope.menuActive = !$scope.menuActive;
		//}

		//placeholder for making new playlists

});

angApp.directive('sidebar', function () {
		return {
				restrict: 'E',
				templateUrl: './app/js/directives/sidebar/sidebar.html'
		};
});
//# sourceMappingURL=data:application/json;base64,
