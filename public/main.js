'use strict';

var app = angular.module('main', ['ui.router']);

app.config(function ($urlRouterProvider) {
  $urlRouterProvider.otherwise('/');
});

app.controller('Explorer', function ($scope, $element, vidConstants) {
  // Code to make the 'file holder div' take in
  // file path names
  var homedir = process.platform === 'win32' ? process.env.HOMEPATH : process.env.HOME;
  var shell = require('electron').shell;
  // var finder = require('./server/algorithms/search.js')
  var fs = require('fs');
  var path = require('path');
  var find = require('findit');
  var parseVideo = require('video-name-parser');

  //Button called "browse", opens homedirectory of user
  $scope.openHome = function () {
    return shell.showItemInFolder(homedir);
  };

  // --------------------------
  // Code that allows you to recurse through the directories
  //provided and return file names that end with certain exts

  var holder = document.getElementById('fileholder');
  holder.ondragover = function () {
    this.className = 'hover';
    return false;
  };
  holder.ondragleave = function () {
    this.className = '';
    return false;
  };
  holder.ondrop = function (e) {
    var dataPathArray = [];
    var soln = [];
    e.preventDefault();
    for (var i = 0; i < e.dataTransfer.files.length; ++i) {
      dataPathArray.push(e.dataTransfer.files[i].path);
    }
    dataPathArray.forEach(function (data) {
      var finder = find(data);
      finder.on('file', function (file, stat) {
        if (vidConstants.vidExtensions.indexOf(path.extname(file)) !== -1) {
          var parsed = parseVideo(file);
          soln.push(parsed);
        }
        console.log("Thank you for your patience!");
      });
      finder.on('end', function (file, stat) {
        // soln.forEach()
        console.log('soln', soln);
      });
    });
    return false;
  };
});

app.factory('vidConstants', function () {
  return {
    vidExtensions: ['.mkv', '.avi', '.mov', '.gifv', '.flv']
  };
});

app.config(function ($stateProvider) {
  $stateProvider.state('explorerState', {
    url: '/',
    templateUrl: './app/explorer/explorer.html',
    controller: 'Explorer'
  });
});

app.controller('DashboardCtrl', function ($scope) {
  //code
  console.log('inside DashboardCtrl');
});

app.config(function ($stateProvider) {
  $stateProvider.state('dashboardState', {
    url: '/test',
    templateUrl: './app/dashboard/dashboard.html'
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImV4cGxvcmVyL2V4cGxvcmVyLmpzIiwiZXhwbG9yZXIvZXhwbG9yZXIuc3RhdGUuanMiLCJkYXNoYm9hcmQvZGFzaGJvYXJkLmNvbnRyb2xsZXIuanMiLCJkYXNoYm9hcmQvZGFzaGJvYXJkLnN0YXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBQSxHQUFBLEdBQUEsT0FBQSxDQUFBLE1BQUEsQ0FBQSxNQUFBLEVBQUEsQ0FBQSxXQUFBLENBQUEsQ0FBQSxDQUFBOztBQUVBLEdBQUEsQ0FBQSxNQUFBLENBQUEsVUFBQSxrQkFBQSxFQUFBO0FBQ0Esb0JBQUEsQ0FBQSxTQUFBLENBQUEsR0FBQSxDQUFBLENBQUE7Q0FDQSxDQUFBLENBQUE7O0FDSkEsR0FBQSxDQUFBLFVBQUEsQ0FBQSxVQUFBLEVBQUEsVUFBQSxNQUFBLEVBQUEsUUFBQSxFQUFBLFlBQUEsRUFBQTs7O0FBR0EsTUFBQSxPQUFBLEdBQUEsT0FBQSxDQUFBLFFBQUEsS0FBQSxPQUFBLEdBQUEsT0FBQSxDQUFBLEdBQUEsQ0FBQSxRQUFBLEdBQ0EsT0FBQSxDQUFBLEdBQUEsQ0FBQSxJQUFBLENBQUE7QUFDQSxNQUFBLEtBQUEsR0FBQSxPQUFBLENBQUEsVUFBQSxDQUFBLENBQUEsS0FBQSxDQUFBOztBQUVBLE1BQUEsRUFBQSxHQUFBLE9BQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQTtBQUNBLE1BQUEsSUFBQSxHQUFBLE9BQUEsQ0FBQSxNQUFBLENBQUEsQ0FBQTtBQUNBLE1BQUEsSUFBQSxHQUFBLE9BQUEsQ0FBQSxRQUFBLENBQUEsQ0FBQTtBQUNBLE1BQUEsVUFBQSxHQUFBLE9BQUEsQ0FBQSxtQkFBQSxDQUFBLENBQUE7OztBQUdBLFFBQUEsQ0FBQSxRQUFBLEdBQUEsWUFBQTtBQUNBLFdBQUEsS0FBQSxDQUFBLGdCQUFBLENBQUEsT0FBQSxDQUFBLENBQUE7R0FDQSxDQUFBOzs7Ozs7QUFNQSxNQUFBLE1BQUEsR0FBQSxRQUFBLENBQUEsY0FBQSxDQUFBLFlBQUEsQ0FBQSxDQUFBO0FBQ0EsUUFBQSxDQUFBLFVBQUEsR0FBQSxZQUFBO0FBQ0EsUUFBQSxDQUFBLFNBQUEsR0FBQSxPQUFBLENBQUE7QUFDQSxXQUFBLEtBQUEsQ0FBQTtHQUNBLENBQUE7QUFDQSxRQUFBLENBQUEsV0FBQSxHQUFBLFlBQUE7QUFDQSxRQUFBLENBQUEsU0FBQSxHQUFBLEVBQUEsQ0FBQTtBQUNBLFdBQUEsS0FBQSxDQUFBO0dBQ0EsQ0FBQTtBQUNBLFFBQUEsQ0FBQSxNQUFBLEdBQUEsVUFBQSxDQUFBLEVBQUE7QUFDQSxRQUFBLGFBQUEsR0FBQSxFQUFBLENBQUE7QUFDQSxRQUFBLElBQUEsR0FBQSxFQUFBLENBQUE7QUFDQSxLQUFBLENBQUEsY0FBQSxFQUFBLENBQUE7QUFDQSxTQUFBLElBQUEsQ0FBQSxHQUFBLENBQUEsRUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLFlBQUEsQ0FBQSxLQUFBLENBQUEsTUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBO0FBQ0EsbUJBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxDQUFBLFlBQUEsQ0FBQSxLQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFBLENBQUE7S0FDQTtBQUNBLGlCQUFBLENBQUEsT0FBQSxDQUFBLFVBQUEsSUFBQSxFQUFBO0FBQ0EsVUFBQSxNQUFBLEdBQUEsSUFBQSxDQUFBLElBQUEsQ0FBQSxDQUFBO0FBQ0EsWUFBQSxDQUFBLEVBQUEsQ0FBQSxNQUFBLEVBQUEsVUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBO0FBQ0EsWUFBQSxZQUFBLENBQUEsYUFBQSxDQUFBLE9BQUEsQ0FBQSxJQUFBLENBQUEsT0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLEtBQ0EsQ0FBQSxDQUFBLEVBQUE7QUFDQSxjQUFBLE1BQUEsR0FBQSxVQUFBLENBQUEsSUFBQSxDQUFBLENBQUE7QUFDQSxjQUFBLENBQUEsSUFBQSxDQUFBLE1BQUEsQ0FBQSxDQUFBO1NBQ0E7QUFDQSxlQUFBLENBQUEsR0FBQSxDQUFBLDhCQUFBLENBQUEsQ0FBQTtPQUNBLENBQUEsQ0FBQTtBQUNBLFlBQUEsQ0FBQSxFQUFBLENBQUEsS0FBQSxFQUFBLFVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQTs7QUFFQSxlQUFBLENBQUEsR0FBQSxDQUFBLE1BQUEsRUFBQSxJQUFBLENBQUEsQ0FBQTtPQUNBLENBQUEsQ0FBQTtLQUNBLENBQUEsQ0FBQTtBQUNBLFdBQUEsS0FBQSxDQUFBO0dBQ0EsQ0FBQTtDQUNBLENBQUEsQ0FBQTs7QUFHQSxHQUFBLENBQUEsT0FBQSxDQUFBLGNBQUEsRUFBQSxZQUFBO0FBQ0EsU0FBQTtBQUNBLGlCQUFBLEVBQUEsQ0FBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxPQUFBLEVBQUEsTUFBQSxDQUFBO0dBQ0EsQ0FBQTtDQUNBLENBQUEsQ0FBQTs7QUM3REEsR0FBQSxDQUFBLE1BQUEsQ0FBQSxVQUFBLGNBQUEsRUFBQTtBQUNBLGdCQUFBLENBQUEsS0FBQSxDQUFBLGVBQUEsRUFBQTtBQUNBLE9BQUEsRUFBQSxHQUFBO0FBQ0EsZUFBQSxFQUFBLDhCQUFBO0FBQ0EsY0FBQSxFQUFBLFVBQUE7R0FDQSxDQUFBLENBQUE7Q0FDQSxDQUFBLENBQUE7O0FDTkEsR0FBQSxDQUFBLFVBQUEsQ0FBQSxlQUFBLEVBQUEsVUFBQSxNQUFBLEVBQUE7O0FBRUEsU0FBQSxDQUFBLEdBQUEsQ0FBQSxzQkFBQSxDQUFBLENBQUE7Q0FDQSxDQUFBLENBQUE7O0FDSEEsR0FBQSxDQUFBLE1BQUEsQ0FBQSxVQUFBLGNBQUEsRUFBQTtBQUNBLGdCQUFBLENBQUEsS0FBQSxDQUFBLGdCQUFBLEVBQUE7QUFDQSxPQUFBLEVBQUEsT0FBQTtBQUNBLGVBQUEsRUFBQSxnQ0FBQTtHQUNBLENBQUEsQ0FBQTtDQUNBLENBQUEsQ0FBQSIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdtYWluJywgWyd1aS5yb3V0ZXInXSk7XG5cbmFwcC5jb25maWcoZnVuY3Rpb24oJHVybFJvdXRlclByb3ZpZGVyKXtcblx0JHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnLycpO1xufSlcbiIsImFwcC5jb250cm9sbGVyKCdFeHBsb3JlcicsIGZ1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQsIHZpZENvbnN0YW50cykge1xuICAvLyBDb2RlIHRvIG1ha2UgdGhlICdmaWxlIGhvbGRlciBkaXYnIHRha2UgaW5cbiAgLy8gZmlsZSBwYXRoIG5hbWVzXG4gIHZhciBob21lZGlyID0gKHByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMicpID8gcHJvY2Vzcy5lbnYuSE9NRVBBVEggOlxuICAgIHByb2Nlc3MuZW52LkhPTUU7XG4gIGNvbnN0IHNoZWxsID0gcmVxdWlyZSgnZWxlY3Ryb24nKS5zaGVsbDtcbiAgLy8gdmFyIGZpbmRlciA9IHJlcXVpcmUoJy4vc2VydmVyL2FsZ29yaXRobXMvc2VhcmNoLmpzJylcbiAgdmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcbiAgdmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG4gIHZhciBmaW5kID0gcmVxdWlyZSgnZmluZGl0Jyk7XG4gIHZhciBwYXJzZVZpZGVvID0gcmVxdWlyZSgndmlkZW8tbmFtZS1wYXJzZXInKTtcblxuICAvL0J1dHRvbiBjYWxsZWQgXCJicm93c2VcIiwgb3BlbnMgaG9tZWRpcmVjdG9yeSBvZiB1c2VyXG4gICRzY29wZS5vcGVuSG9tZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzaGVsbC5zaG93SXRlbUluRm9sZGVyKGhvbWVkaXIpO1xuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gQ29kZSB0aGF0IGFsbG93cyB5b3UgdG8gcmVjdXJzZSB0aHJvdWdoIHRoZSBkaXJlY3Rvcmllc1xuICAvL3Byb3ZpZGVkIGFuZCByZXR1cm4gZmlsZSBuYW1lcyB0aGF0IGVuZCB3aXRoIGNlcnRhaW4gZXh0c1xuXG4gIHZhciBob2xkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmlsZWhvbGRlcicpO1xuICBob2xkZXIub25kcmFnb3ZlciA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuY2xhc3NOYW1lID0gJ2hvdmVyJztcbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG4gIGhvbGRlci5vbmRyYWdsZWF2ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuY2xhc3NOYW1lID0gJyc7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuICBob2xkZXIub25kcm9wID0gZnVuY3Rpb24oZSkge1xuICAgIHZhciBkYXRhUGF0aEFycmF5ID0gW107XG4gICAgdmFyIHNvbG4gPSBbXTtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlLmRhdGFUcmFuc2Zlci5maWxlcy5sZW5ndGg7ICsraSkge1xuICAgICAgZGF0YVBhdGhBcnJheS5wdXNoKGUuZGF0YVRyYW5zZmVyLmZpbGVzW2ldLnBhdGgpO1xuICAgIH1cbiAgICBkYXRhUGF0aEFycmF5LmZvckVhY2goZnVuY3Rpb24oZGF0YSkge1xuICAgICAgdmFyIGZpbmRlciA9IGZpbmQoZGF0YSk7XG4gICAgICBmaW5kZXIub24oJ2ZpbGUnLCBmdW5jdGlvbihmaWxlLCBzdGF0KSB7XG4gICAgICAgIGlmICh2aWRDb25zdGFudHMudmlkRXh0ZW5zaW9ucy5pbmRleE9mKHBhdGguZXh0bmFtZShmaWxlKSkgIT09XG4gICAgICAgICAgLTEpIHtcbiAgICAgICAgICB2YXIgcGFyc2VkID0gcGFyc2VWaWRlbyhmaWxlKTtcbiAgICAgICAgICBzb2xuLnB1c2gocGFyc2VkKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZyhcIlRoYW5rIHlvdSBmb3IgeW91ciBwYXRpZW5jZSFcIik7XG4gICAgICB9KVxuICAgICAgZmluZGVyLm9uKCdlbmQnLCBmdW5jdGlvbihmaWxlLCBzdGF0KSB7XG4gICAgICAgIC8vIHNvbG4uZm9yRWFjaCgpXG4gICAgICAgIGNvbnNvbGUubG9nKCdzb2xuJywgc29sbilcbiAgICAgIH0pXG4gICAgfSlcbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG59KTtcblxuXG5hcHAuZmFjdG9yeSgndmlkQ29uc3RhbnRzJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgdmlkRXh0ZW5zaW9uczogWycubWt2JywgJy5hdmknLCAnLm1vdicsICcuZ2lmdicsICcuZmx2J11cbiAgfVxufSlcbiIsImFwcC5jb25maWcoZnVuY3Rpb24oJHN0YXRlUHJvdmlkZXIpe1xuICAkc3RhdGVQcm92aWRlci5zdGF0ZSgnZXhwbG9yZXJTdGF0ZScsIHtcbiAgICB1cmw6ICcvJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vYXBwL2V4cGxvcmVyL2V4cGxvcmVyLmh0bWwnLFxuICAgIGNvbnRyb2xsZXI6ICdFeHBsb3JlcidcbiAgfSlcbn0pXG4iLCJhcHAuY29udHJvbGxlcignRGFzaGJvYXJkQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSl7XG4gIC8vY29kZVxuICBjb25zb2xlLmxvZygnaW5zaWRlIERhc2hib2FyZEN0cmwnKVxufSlcbiIsImFwcC5jb25maWcoZnVuY3Rpb24oJHN0YXRlUHJvdmlkZXIpe1xuICAkc3RhdGVQcm92aWRlci5zdGF0ZSgnZGFzaGJvYXJkU3RhdGUnLCB7XG4gICAgdXJsOiAnL3Rlc3QnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9hcHAvZGFzaGJvYXJkL2Rhc2hib2FyZC5odG1sJ1xuICB9KVxufSlcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
